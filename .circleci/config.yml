version: 2.1

orbs:
  snyk: snyk/snyk@1.4.0
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@8.2.1
  helm: circleci/helm@1.2.0
  slack: circleci/slack@4.9.3

_snyk_options: &snyk_options
  project: "${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}"
  organization: "legal-aid-agency"
  severity-threshold: "critical"
  fail-on-issues: true
  monitor-on-build: false
  token-variable: SNYK_TOKEN
  additional-arguments: --policy-path=.snyk --all-sub-projects

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

# ------------------
# COMMANDS
# ------------------
commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key
  setup-kubectl:
    description: >
      Authenticate with kubernetes cluster
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - run:
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=<< parameters.token >>
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=laa-crime-applications-adaptor-<< parameters.environment >>
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=laa-crime-applications-adaptor-<< parameters.environment >> get pods

  push-api-test-image:
    description: >
      Push API tests image
    steps:
      - aws-ecr/build-image:
          dockerfile: Dockerfile.api-tests
          push-image: true
          tag: api-tests-${CIRCLE_SHA1}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
  run-api-tests:
    description: >
      Run API Tests against deployed application
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - setup-kubectl:
          environment: << parameters.environment >>
          token: << parameters.token >>
      - helm/upgrade-helm-chart:
          namespace: laa-crime-applications-adaptor-<< parameters.environment >>
          update-repositories: false
          chart: ./helm_deploy/laa-caa-api-tests/
          release-name: laa-caa-api-tests
          values: ./helm_deploy/laa-caa-api-tests/values-<< parameters.environment >>.yaml
          values-to-override: image.tag=api-tests-${CIRCLE_SHA1}
      - run:
          name: Setup environment variables
          command: |
            export NAMESPACE=laa-crime-applications-adaptor-<< parameters.environment >>
            export POD_NAME=$(kubectl get pods -n ${NAMESPACE} -l "app.kubernetes.io/name=laa-caa-api-tests,app.kubernetes.io/instance=laa-caa-api-tests" -o jsonpath="{.items[0].metadata.name}")

            echo "export NAMESPACE=\"$NAMESPACE\"" >> "$BASH_ENV"
            echo "export POD_NAME=\"$POD_NAME\"" >> "$BASH_ENV"
      - run:
          name: Run API tests
          command: |
            kubectl wait --for=condition=ready pod/${POD_NAME} --timeout=60s -n ${NAMESPACE}
            kubectl exec -n ${NAMESPACE} ${POD_NAME} -- ./gradlew api-tests:test
      - run:
          name: Fetch API test results
          command: |
            echo Copying API test date from Pod:${NAMESPACE} in Namespace:${POD_NAME}
            mkdir -p ./api-test-results/reports
            mkdir -p ./api-test-results/test-results
            kubectl cp ${NAMESPACE}/${POD_NAME}:/home/api-test-suite/api-tests/build/reports ./api-test-results/reports
            kubectl cp ${NAMESPACE}/${POD_NAME}:/home/api-test-suite/api-tests/build/test-results ./api-test-results/test-results
          when: always
      - run:
          name: Uninstall API test release
          command: |
            helm uninstall laa-caa-api-tests -n ${NAMESPACE}
          when: always
      - store_test_results:
          path: ./api-test-results/test-results/test
      - store_artifacts:
          path: ./api-test-results/reports/tests/test
      - store_artifacts:
          path: ./api-test-results/test-results/test
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main

  deploy-to:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - checkout_and_decrypt
      - setup-kubectl:
          environment: << parameters.environment >>
          token: << parameters.token >>
      - helm/upgrade-helm-chart:
          namespace: laa-crime-applications-adaptor-<< parameters.environment >>
          update-repositories: false
          chart: ./helm_deploy/laa-crime-applications-adaptor/
          release-name: laa-crime-applications-adaptor
          values: ./helm_deploy/laa-crime-applications-adaptor/values-<< parameters.environment >>.yaml
          values-to-override: image.tag=${CIRCLE_SHA1}

# ------------------
# JOBS
# ------------------
jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crime-applications-adaptor/crime-applications-adaptor
    steps:
      - checkout:
          path: ~/laa-crime-applications-adaptor
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install Dependencies
          command: ./gradlew application:build -x test
      - run:
          name: Run SonarQube
          command: ./gradlew sonarqube -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.organization=${SONAR_ORG}
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - application/build

  scan_app:
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crime-applications-adaptor/crime-applications-adaptor
    steps:
      - checkout:
          path: ~/laa-crime-applications-adaptor
      - attach_workspace:
          at: .
      - snyk/scan:
          <<: *snyk_options

  test_and_assemble:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crime-applications-adaptor/crime-applications-adaptor
    steps:
      - checkout:
          path: ~/laa-crime-applications-adaptor
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests
          command: ./gradlew application:test
      - run:
          name: Generate code coverage report
          command: ./gradlew application:jacocoTestReport
      - store_test_results:
          path: application/build/test-results/test
      - store_artifacts:
          path: application/build/test-results/test
      - store_artifacts:
          path: application/build/reports/jacoco/test/html
      - run:
          name: Assemble JAR
          command: ./gradlew application:assemble
      - store_artifacts:
          path: application/build/libs
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main
      - slack/notify:
          channel: laa-crimeapps-ci
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Deployment Successful! ðŸ¥³",
                      "emoji": true
                    },   
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Successful Job:*\n$CIRCLE_JOB"
                    }
                  ]
                }
              ]
            }

  build_and_scan_image:
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crime-applications-adaptor/crime-applications-adaptor
    steps:
      - checkout:
          path: ~/laa-crime-applications-adaptor
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - aws-ecr/build-image:
          push-image: false
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
      - snyk/scan:
          docker-image-name: "$AWS_ECR_ACCOUNT_URL/laa-crime-apps-team/laa-crime-applications-adaptor-dev-ecr:${CIRCLE_SHA1}"
          <<: *snyk_options

  build_and_push_image:
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crime-applications-adaptor/crime-applications-adaptor
    steps:
      - checkout:
          path: ~/laa-crime-applications-adaptor
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - aws-ecr/build-image:
          push-image: true
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
      - push-api-test-image

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev
          token: ${CIRCLE_CI_TOKEN_DEV}
      - run-api-tests:
          environment: dev
          token: ${CIRCLE_CI_TOKEN_DEV}
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main
      - slack/notify:
          channel: laa-crimeapps-ci
          event: pass
          template: success_tagged_deploy_1

  deploy-test:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: test
          token: ${CIRCLE_CI_TOKEN_TEST}
      - run-api-tests:
          environment: test
          token: ${CIRCLE_CI_TOKEN_TEST}
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main
      - slack/notify:
          channel: laa-crimeapps-ci
          event: pass
          template: success_tagged_deploy_1

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: uat
          token: ${CIRCLE_CI_TOKEN_UAT}
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main
      - slack/notify:
          channel: laa-crimeapps-ci
          event: pass
          template: success_tagged_deploy_1

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: prod
          token: ${CIRCLE_CI_TOKEN_PROD}
      - slack/notify:
          channel: laa-crimeapps-ci
          event: fail
          template: basic_fail_1
          branch_pattern: main
      - slack/notify:
          channel: laa-crimeapps-ci
          event: pass
          template: success_tagged_deploy_1

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2

  build-deploy-master:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main

      - scan_app:
          requires:
            - build

      - test_and_assemble:
          requires:
            - scan_app
          context: laa-crime-apps-slack

      - build_and_scan_image:
          requires:
            - test_and_assemble

      - build_and_push_image:
          requires:
            - build_and_scan_image

      - deploy-dev:
          requires:
            - build_and_push_image
          context: laa-crime-apps-slack

      - hold_install_on_test:
          type: approval
          requires:
            - build_and_push_image

      - deploy-test:
          requires:
            - hold_install_on_test
          context: laa-crime-apps-slack

      - hold_install_on_uat:
          type: approval
          requires:
            - build_and_push_image

      - deploy-uat:
          requires:
            - hold_install_on_uat
          context: laa-crime-apps-slack

      - hold_install_on_prod:
          type: approval
          requires:
            - build_and_push_image

      - deploy-prod:
          requires:
            - hold_install_on_prod
          context: laa-crime-apps-slack

  build-deploy-branch:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - main

      - scan_app:
          requires:
            - build

      - test_and_assemble:
          requires:
            - scan_app
          context: laa-crime-apps-slack

      - build_and_scan_image:
          requires:
            - test_and_assemble

      - build_and_push_image:
          requires:
            - build_and_scan_image

      - hold_install_on_dev:
          type: approval
          requires:
            - build_and_push_image

      - deploy-dev:
          requires:
            - hold_install_on_dev
          context: laa-crime-apps-slack

      - hold_install_on_test:
          type: approval
          requires:
            - build_and_push_image

      - deploy-test:
          requires:
            - hold_install_on_test
          context: laa-crime-apps-slack

      - hold_install_on_uat:
          type: approval
          requires:
            - build_and_push_image

      - deploy-uat:
          requires:
            - hold_install_on_uat
          context: laa-crime-apps-slack
